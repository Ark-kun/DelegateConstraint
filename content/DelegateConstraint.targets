<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="IL.targets" />

  <!--
  <Target Name="BeforeCompile" DependsOnTargets="GenerateDelegateStubs" />
  <Target Name="AfterCompile" DependsOnTargets="InitialyzeILFilePaths;ILDasm;HackDelegateConstraints;ILAsm;HackTimestamps" />
  -->  

  <PropertyGroup>
    <CompileDependsOn>
      GenerateDelegateStubs;
      $(CompileDependsOn);
      InitialyzeILFilePaths;
      ILDasm;
      HackDelegateConstraints;
      ILAsm;HackTimestamps
    </CompileDependsOn>
  </PropertyGroup>

  <Target Name="InitialyzeILFilePaths">
    <PropertyGroup>
      <AssemblyFile>@(IntermediateAssembly->'%(FullPath)')</AssemblyFile>
      <!--
      <OriginalAssemblyFile>@(IntermediateAssembly->'%(RootDir)%(Directory)%(Filename).original%(Extension)')</OriginalAssemblyFile>
      <TransformedAssemblyFile>$(AssemblyFile)</TransformedAssemblyFile>
      -->

      <AssemblyReferencesCache>@(IntermediateAssembly->'%(RootDir)%(Directory)DesignTimeResolveAssemblyReferencesInput.cache')</AssemblyReferencesCache>

      <ILFile>@(IntermediateAssembly->'%(RootDir)%(Directory)%(Filename).il')</ILFile>
      <TransformedILFile>@(IntermediateAssembly->'%(RootDir)%(Directory)%(Filename).modified.il')</TransformedILFile>
      <ILResourceFile>@(IntermediateAssembly->'%(RootDir)%(Directory)%(Filename).res')</ILResourceFile>
    </PropertyGroup>

    <!--ILDasm-->
    <PropertyGroup>
      <ILDasmInputFile>$(AssemblyFile)</ILDasmInputFile>
      <ILDasmOuputFile>$(ILFile)</ILDasmOuputFile>
    </PropertyGroup>

    <!--ILTransform-->
    <PropertyGroup>
      <ILTransformInputFile>$(ILFile)</ILTransformInputFile>
      <ILTransformOuputFile>$(TransformedILFile)</ILTransformOuputFile>
    </PropertyGroup>

    <!--ILAsm-->
    <ItemGroup>
      <ILAsmInputFiles Include="$(TransformedILFile)" />
    </ItemGroup>
    <PropertyGroup>
      <ILAsmOutputFile>$(AssemblyFile)</ILAsmOutputFile>
    </PropertyGroup>
  </Target>

  <Target Name="HackDelegateConstraints" Inputs="$(ILTransformInputFile)" Outputs="$(ILTransformOuputFile)">
    <PropertyGroup>
      <ILSource>$([System.IO.File]::ReadAllText($(ILTransformInputFile)))</ILSource>

      <Pattern>.*callvirt\s+instance !0 class Ark\.IDelegate`1.*::get_Invoke\(\).*</Pattern>
      <Replacement></Replacement>
      <ILSource>$([System.Text.RegularExpressions.Regex]::Replace($(ILSource), $(Pattern), $(Replacement)))</ILSource>

      <Pattern>class Ark\.IDelegate`1&lt;(([^&lt;&gt;]+|&lt;([^&lt;&gt;]+|&lt;[^&lt;&gt;]+&gt;)+&gt;)+)&gt;</Pattern>
      <Replacement>$1</Replacement>
      <ILSource>$([System.Text.RegularExpressions.Regex]::Replace($(ILSource), $(Pattern), $(Replacement)))</ILSource>

      <Pattern>\(Ark\.IDelegate\)</Pattern>
      <Replacement>([mscorlib]System.Delegate)</Replacement>
      <ILSource>$([System.Text.RegularExpressions.Regex]::Replace($(ILSource), $(Pattern), $(Replacement)))</ILSource>
      
      <Pattern>(?s)\.class [^\n]* Ark\.IDelegate(`1)?.*} // end of class Ark\.IDelegate(`1)?</Pattern>
      <Replacement></Replacement>
      <ILSource>$([System.Text.RegularExpressions.Regex]::Replace($(ILSource), $(Pattern), $(Replacement)))</ILSource>
    </PropertyGroup>
    <WriteLinesToFile File="$(ILTransformOuputFile)" Lines="$(ILSource)" Overwrite="true" />
    <PropertyGroup>
      <ILSource/>
    </PropertyGroup>
  </Target>

  <Target Name="HackTimestamps" Inputs="$(TransformedAssemblyFile)" Outputs="$(OriginalAssemblyFile)">
    <Touch Files="$(AssemblyFile);$(ILTransformInputFile);$(TransformedILFile)" />
  </Target>

  <Target Name="GenerateDelegateStubs">
    <PropertyGroup>
      <DelegateStubsFileBase>$([System.IO.Path]::Combine('$(IntermediateOutputPath)', 'DelegateStubs'))</DelegateStubsFileBase>
    </PropertyGroup>

    <PropertyGroup Condition="'$(MSBuildProjectExtension)' == '.csproj'">
      <DelegateStubsFile>$(DelegateStubsFileBase).cs</DelegateStubsFile>
      <DelegateStubsCode>
        <![CDATA[
using System;
using System.Reflection;
//using System.Runtime.Serialization;

namespace Ark {
    public abstract class IDelegate {
        public object Clone() { throw new NotImplementedException(); }
        public object DynamicInvoke(params object[] args) { throw new NotImplementedException(); }
        public override bool Equals(object obj) { throw new NotImplementedException(); }
        public override int GetHashCode() { throw new NotImplementedException(); }
        public IDelegate[] GetInvocationList() { throw new NotImplementedException(); }
        //public void GetObjectData(SerializationInfo info, StreamingContext context) { throw new NotImplementedException(); } //Not supported in some portable subsets
        public override string ToString() { throw new NotImplementedException(); }
#if !NETFX_CORE
        public MethodInfo Method { get { throw new NotImplementedException(); } }
#endif
        public Object Target { get { throw new NotImplementedException(); } }
        public static bool operator ==(IDelegate d1, IDelegate d2) { throw new NotImplementedException(); }
        public static bool operator !=(IDelegate d1, IDelegate d2) { throw new NotImplementedException(); }
        //protected virtual IDelegate CombineImpl(IDelegate d) { throw new NotImplementedException(); }
        //protected virtual Object DynamicInvokeImpl(Object[] args) { throw new NotImplementedException(); }
        //protected virtual MethodInfo GetMethodImpl() { throw new NotImplementedException(); }
        //protected virtual Delegate RemoveImpl(IDelegate d) { throw new NotImplementedException(); }
        public static IDelegate Combine(params IDelegate[] delegates) { throw new NotImplementedException(); }
        public static IDelegate Combine(IDelegate a, IDelegate b) { throw new NotImplementedException(); }
        public static IDelegate Remove(IDelegate source, IDelegate value) { throw new NotImplementedException(); }
        public static IDelegate RemoveAll(IDelegate source, IDelegate value) { throw new NotImplementedException(); }
    }

    public abstract class IDelegate<TDelegate> : IDelegate {
        public TDelegate Invoke { get { throw new NotImplementedException(); } }
    }
}
        ]]>
      </DelegateStubsCode>
    </PropertyGroup>

    <PropertyGroup Condition="'$(MSBuildProjectExtension)' == '.vbproj'">
      <DelegateStubsFile>$(DelegateStubsFileBase).vb</DelegateStubsFile>
      <DelegateStubsCode>
        <![CDATA[
Imports System.Reflection
'Imports System.Runtime.Serialization;

Namespace Global.Ark
    Public MustInherit Class IDelegate
        Public Function Clone() As Object
            Throw New NotImplementedException()
        End Function
        Public Function DynamicInvoke(ParamArray args As Object()) As Object
            Throw New NotImplementedException()
        End Function
        Public Overrides Function Equals(obj As Object) As Boolean
            Throw New NotImplementedException()
        End Function
        Public Overrides Function GetHashCode() As Integer
            Throw New NotImplementedException()
        End Function
        Public Function GetInvocationList() As [IDelegate]()
            Throw New NotImplementedException()
        End Function
        ''Not supported in some portable subsets
        'Public Sub GetObjectData(info As SerializationInfo, context As StreamingContext)
        '    Throw New NotImplementedException()
        'End Sub
        Public Overrides Function ToString() As String
            Throw New NotImplementedException()
        End Function
#If Not NETFX_CORE Then
        Public ReadOnly Property Method() As MethodInfo
            Get
                Throw New NotImplementedException()
            End Get
        End Property
#End If
        Public ReadOnly Property Target() As Object
            Get
                Throw New NotImplementedException()
            End Get
        End Property
        Public Shared Operator =(d1 As IDelegate, d2 As IDelegate) As Boolean
            Throw New NotImplementedException()
        End Operator
        Public Shared Operator <>(d1 As IDelegate, d2 As IDelegate) As Boolean
            Throw New NotImplementedException()
        End Operator

        'Protected Overridable Function CombineImpl(d As IDelegate) As IDelegate
        '    Throw New NotImplementedException()
        'End Function
        'Protected Overridable Function DynamicInvokeImpl(args As Object()) As Object
        '    Throw New NotImplementedException()
        'End Function
        'Protected Overridable Function GetMethodImpl() As MethodInfo
        '    Throw New NotImplementedException()
        'End Function
        'Protected Overridable Function RemoveImpl(d As IDelegate) As [Delegate]
        '    Throw New NotImplementedException()
        'End Function

        Public Shared Function Combine(ParamArray delegates As IDelegate()) As IDelegate
            Throw New NotImplementedException()
        End Function
        Public Shared Function Combine(a As IDelegate, b As IDelegate) As IDelegate
            Throw New NotImplementedException()
        End Function
        Public Shared Function Remove(source As IDelegate, value As IDelegate) As IDelegate
            Throw New NotImplementedException()
        End Function
        Public Shared Function RemoveAll(source As IDelegate, value As IDelegate) As IDelegate
            Throw New NotImplementedException()
        End Function
    End Class

    Public MustInherit Class IDelegate(Of TDelegate)
        Inherits IDelegate
        Public ReadOnly Property Invoke() As TDelegate
            Get
                Throw New NotImplementedException()
            End Get
        End Property
    End Class
End Namespace
        ]]>
      </DelegateStubsCode>
    </PropertyGroup>

    <Warning Condition="'$(DelegateStubsFile)' == ''" Text="Unrecognized project type. You would need to provide the delegate stub interfaces yourself."/>

    <WriteLinesToFile Condition = "!Exists('$(DelegateStubsFile)') and '$(DelegateStubsFile)' != ''"
      File="$(DelegateStubsFile)"
      Lines="$([MSBuild]::Escape($(DelegateStubsCode)))"/>

    <ItemGroup Condition="'$(DelegateStubsFile)' != ''">
      <Compile Include="$(DelegateStubsFile)" />
    </ItemGroup>
  </Target>
</Project>
